name: Deploy React App to OCI

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up OCI CLI
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        with:
          command: "oci -v"

      - name: Configure OCI CLI
        env:
          OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_KEY_FINGERPRINT: ${{ secrets.OCI_KEY_FINGERPRINT }}
        run: |
          mkdir -p ~/.oci
          echo "[DEFAULT]" > ~/.oci/config
          echo "user=${OCI_USER_OCID}" >> ~/.oci/config
          echo "fingerprint=${OCI_KEY_FINGERPRINT}" >> ~/.oci/config
          echo "tenancy=${OCI_TENANCY_OCID}" >> ~/.oci/config
          echo "region=${OCI_REGION}" >> ~/.oci/config
          echo "${OCI_PRIVATE_KEY}" > ~/.oci/oci_private_key.pem
          chmod 600 ~/.oci/oci_private_key.pem
          echo "key_file=~/.oci/oci_private_key.pem" >> ~/.oci/config
          chmod 600 ~/.oci/config
          echo "Config file created at ~/.oci/config"

      - name: Check if the instance is running
        run: |
          instance_state=$(oci compute instance list \
          --compartment-id  ${{ secrets.OCI_COMPARTMENT_ID }} \
          --query "data[?\"lifecycle-state\"=='RUNNING'] | sort_by(@, &\"time-created\") | [-1].\"lifecycle-state\"" \
          --output json | jq -r '.')

          while [ "$instance_state" != "RUNNING" ]; do
          sleep 10
          
          instance_state=$(oci compute instance list \
              --compartment-id  ${{ secrets.OCI_COMPARTMENT_ID }} \
              --query "data[?\"lifecycle-state\"=='RUNNING'] | sort_by(@, &\"time-created\") | [-1].\"lifecycle-state\"" \
              --output json | jq -r '.')
          done

      - name: Get the public IP of the instance
        run: |
          PUBLIC_IP=$(oci compute instance list --compartment-id ${{ secrets.OCI_COMPARTMENT_ID }} --sort-by TIMECREATED --all --query "data[0].id" --raw-output | xargs -I {} oci compute instance list-vnics --instance-id {} --query "data[0].\"public-ip\"" --raw-output)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Update Cloudflare DNS Record (Optimized)
        run: |
          EXISTING_IP=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records/${{ secrets.RECORD_ID }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" | jq -r '.result.content')

          if [ "$EXISTING_IP" != "${{ env.PUBLIC_IP }}" ]; then
            curl -X PATCH "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records/${{ secrets.RECORD_ID }}" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data '{"content": "'${{ env.PUBLIC_IP }}'", "type": "A"}'
          else
            echo "Cloudflare DNS record is already up to date."
          fi

      - name: Create Ansible Inventory
        run: |
          if [ -z "${{ env.PUBLIC_IP }}" ]; then
            echo "Error: PUBLIC_IP is empty"
            exit 1
          fi
          cp ansible/inventory_template.ini ansible/inventory.ini
          sed -i "s/__PUBLIC_IP__/${{ env.PUBLIC_IP }}/g" ansible/inventory.ini

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ env.PUBLIC_IP }}" >> ~/.ssh/known_hosts

      - name: Import .env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > ansible/.env

      - name: Cache Ansible
        id: cache-ansible
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/ansible
          key: ansible-${{ runner.os }}-${{ runner.arch }}
          
      - name: Install Ansible (If Not Cached)
        if: steps.cache-ansible.outputs.cache-hit != 'true'
        run: |
          sudo apt update && sudo apt install -y ansible

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yml