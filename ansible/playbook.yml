- name: Deploy Docker Containers to OCI
  hosts: oci
  become: true

  tasks:
    - name: Ensure required packages are installed
      apt:
        update_cache: yes
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Ensure Docker service is started
      service:
        name: docker
        state: started
        enabled: yes

    - name: Ensure db_data volume exists
      docker_volume:
        name: db_data
        state: present

    - name: Ensure my_network exists
      docker_network:
        name: my_network
        state: present

    - name: Run MySQL container
      docker_container:
        name: mysql
        image: mysql:8
        state: started
        restart_policy: always
        networks:
          - name: my_network
        env:
          MYSQL_ROOT_PASSWORD: "sysadmsysadm"
          MYSQL_DATABASE: "chatbox_db"
          MYSQL_USER: "user"
          MYSQL_PASSWORD: "sysadm"
        volumes:
          - db_data:/var/lib/mysql

    - name: Run Frontend container
      docker_container:
        name: frontend
        image: jeanmichelbb/oci-frontend:latest
        state: started
        restart_policy: always
        networks:
          - name: my_network
        ports:
          - "80:80"
        recreate: true

    - name: Copy .env file to target machine
      copy:
        src: .env
        dest: /tmp/.env
        mode: "0644"

    - name: Run Backend container with .env file
      docker_container:
        name: backend
        image: jeanmichelbb/oci-backend:latest
        state: started
        restart_policy: always
        networks:
          - name: my_network
        ports:
          - "8000:8000"
        env_file: /tmp/.env
        recreate: true

    - name: Create systemd service for automatic Docker updates
      copy:
        dest: /etc/systemd/system/chatbox-update.service
        content: |
          [Unit]
          Description=Update and Restart Chatbox Containers on Boot
          After=network.target docker.service
          Requires=docker.service

          [Service]
          Type=oneshot
          ExecStart=/bin/bash -c '
            UPDATED=0
            for IMAGE in jeanmichelbb/oci-backend jeanmichelbb/oci-frontend; do
              BEFORE=$(/usr/bin/docker inspect --format="{{.Id}}" $IMAGE:latest 2>/dev/null || echo "")
              /usr/bin/docker pull $IMAGE:latest
              AFTER=$(/usr/bin/docker inspect --format="{{.Id}}" $IMAGE:latest 2>/dev/null || echo "")
              if [ "$BEFORE" != "$AFTER" ]; then UPDATED=1; fi
            done
            if [ $UPDATED -eq 1 ]; then
              /usr/bin/docker rm -f backend frontend || true
              /usr/bin/docker run -d --name backend --network my_network -p 8000:8000 --env-file /tmp/.env jeanmichelbb/oci-backend:latest
              /usr/bin/docker run -d --name frontend --network my_network -p 80:80 jeanmichelbb/oci-frontend:latest
            fi
          '

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd daemon
      command: systemctl daemon-reload

    - name: Enable chatbox-update service
      systemd:
        name: chatbox-update
        enabled: yes